name: Anno-bot
description: Creates a release summary of code changes between workflow runs and sends it to a Slack channel.
inputs:
  app_name:
    description: App name for the Slack message. Defaults to the repository name.
    required: false
  chat_gpt_api_key:
    description: ChatGPT API key. It must have read and write permissions for chat completions.
    required: true
  chat_gpt_model:
    description: ChatGPT model to use. Defaults to `gpt-4o`.
    required: false
    default: "gpt-4o"
  github_token:
    description: GitHub token to access the repository. This should automatically be available as a secret.
    required: true
  jira_integration_enabled:
    description: Enable Jira integration. Defaults to `false`.
    required: false
  jira_api_key:
    description: Base64-encoded `<username>:<api_token>` for Jira with read permissions. Required if Jira is enabled.
    required: false
  jira_base_url:
    description: Base URL of your Jira instance, e.g. https://my-company.atlassian.net. Required if Jira is enabled.
    required: false
  jira_project_key:
    description: Jira project key. Required if Jira is enabled.
    required: false
  slack_webhook_url:
    description: Slack webhook URL for the release summary.
    required: true

runs:
  using: "composite"
  steps:
    - name: Set reusable variables
      shell: bash
      run: |
        echo "action_repo=anno" >> $GITHUB_ENV
        echo "action_org=thesolesupplier" >> $GITHUB_ENV
        echo "binary_name=action" >> $GITHUB_ENV

    - name: Add binary extension
      shell: bash
      if: runner.os == 'Windows'
      run: echo "binary_name=${{ env.binary_name }}.exe" >> $GITHUB_ENV

    - name: Get Action Version
      id: get_action_version
      shell: pwsh
      run: |
        $finalComponent = Split-Path -Leaf ${{ github.action_path }}
        if ($finalComponent -eq "${{ env.action_repo }}") {
          $version = ""
        } else {
          $version = $finalComponent
        }
        Write-Output "version=$version" >> $Env:GITHUB_OUTPUT

    - name: Download Action
      shell: bash
      run: |
        gh release download ${{ steps.get_action_version.outputs.version }} --repo ${{ env.action_org }}/${{ env.action_repo }} --pattern '${{ runner.os }}.tgz'
        tar -xzf ${{ runner.os }}.tgz
      env:
        GH_TOKEN: ${{ github.token }}

    - name: Run Action
      shell: bash
      id: run
      run: ./${{ runner.os }}/${{ env.binary_name }}
      env:
        APP_NAME: ${{ inputs.app_name }}
        CHAT_GPT_API_KEY: ${{ inputs.chat_gpt_api_key }}
        CHAT_GPT_BASE_URL: https://api.openai.com/v1
        CHAT_GPT_MODEL: ${{ inputs.chat_gpt_model }}
        GITHUB_BASE_URL: https://api.github.com
        GITHUB_TOKEN: ${{ inputs.github_token }}
        JIRA_API_KEY: ${{ inputs.jira_api_key }}
        JIRA_BASE_URL: ${{ inputs.jira_base_url }}
        JIRA_INTEGRATION_ENABLED: ${{ inputs.jira_integration_enabled }}
        JIRA_PROJECT_KEY: ${{ inputs.jira_project_key }}
        REPOS_DIR: ./repos
        SLACK_MESSAGE_ENABLED: true
        SLACK_WEBHOOK_URL: ${{ inputs.slack_webhook_url }}
